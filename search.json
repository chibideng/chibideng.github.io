[{"title":"C++智能指针","url":"/2022/02/22/paper1/","content":"<p><a href=\"https://blog.csdn.net/code_peak/article/details/119722167\">网址</a></p>\n","categories":["C++"]},{"title":"C++虚函数","url":"/2022/02/22/paper2/","content":"<p><a href=\"https://blog.csdn.net/caoshangpa/article/details/80112673\">网址</a></p>\n","categories":["C++"]},{"title":"C++11新特性","url":"/2022/02/22/paper3/","content":"<h1 id=\"最常用的新特性\"><a href=\"#最常用的新特性\" class=\"headerlink\" title=\"最常用的新特性\"></a>最常用的新特性</h1><ul>\n<li><p>auto关键字：编译器可以根据初始值自动推导出类型。但是不能用于函数传参以及数组类型的推导</p>\n</li>\n<li><p>nullptr关键字：nullptr是一种特殊类型的字面值，它可以被转换成任意其它的指针类型；而NULL一般被宏定义为0，在遇到重载时可能会出现问题</p>\n</li>\n<li><p>智能指针：C++11新增了std::shared_ptr、std::weak_ptr等类型的智能指针，用于解决内存管理的问题。</p>\n</li>\n<li><p>初始化列表：使用初始化列表来对类进行初始化</p>\n</li>\n<li><p>右值引用：基于右值引用可以实现移动语义和完美转发，消除两个对象交互时不必要的对象拷贝，节省运算存储资源，提高效率</p>\n</li>\n<li><p>atomic原子操作用于多线程资源互斥操作</p>\n</li>\n<li><p>新增STL容器array以及tuple等</p>\n</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/feng-sc/p/5710724.html\">C++常用特性的使用经验总结</a></p>\n","categories":["C++"]},{"title":"进程与线程","url":"/2022/02/22/paper4/","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li>进程：是对运行时程序的封装，是系统进行资源调度和分配的基本单位，实现了操作系统的并发；</li>\n<li>线程：是进程的子任务，是CPU调度和分派的基本单位，用于保证程序的实时性，实现进程内部的并发；线程是操作系统可识别的最小执行单位。每个线程都独自占用一个虚拟处理器：独自的寄存器组，指令计数器和处理状态。每个线程完成不同的任务，但是共享同一地址空间（也就是同样的动态内存，映射文件，目标代码等等），打开的文件队列和其他内核资源。<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1></li>\n</ul>\n<ol>\n<li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程依赖于进程而存在。</li>\n<li>进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。（资源分配给进程，同一进程的所有线程共享该进程的所有资源。同一进程中的多个线程共享代码段（代码和常量），数据段（全局变量和静态变量），扩展段（堆存储）。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。）</li>\n<li>进程是资源分配的最小单位，线程是CPU调度的最小单位；</li>\n<li>系统开销： 由于在创建或撤消进程时，系统都要为之分配或回收资源，如内存空间、I／o设备等。因此，操作系统所付出的开销将显著地大于在创建或撤消线程时的开销。类似地，在进行进程切换时，涉及到整个当前进程CPU环境的保存以及新被调度运行的进程的CPU环境的设置。而线程切换只须保存和设置少量寄存器的内容，并不涉及存储器管理方面的操作。可见，进程切换的开销也远大于线程切换的开销。</li>\n<li>通信：由于同一进程中的多个线程具有相同的地址空间，致使它们之间的同步和通信的实现，也变得比较容易。进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。在有的系统中，线程的切换、同步和通信都无须操作系统内核的干预</li>\n<li>进程编程调试简单可靠性高，但是创建销毁开销大；线程正相反，开销小，切换速度快，但是编程调试相对复杂。</li>\n<li>进程间不会相互影响 ；线程一个线程挂掉将导致整个进程挂掉</li>\n<li>进程适应于多核、多机分布；线程适用于多核</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/m0_48028855/article/details/109861839\">网址</a></p>\n","categories":["操作系统"]},{"title":"网络模型和协议","url":"/2022/02/23/paper5/","content":"<h1 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h1><ul>\n<li>物理层：通过媒介传输比特，确定机械及电器规范，传输单位为bit，主要协议包括：IEE802.3 CLOCK RJ45</li>\n<li>数据链路层：将比特组成帧和点到点传输，传输单位为帧，主要包括协议为MAC VLAN PPP</li>\n<li>网络层：负责数据包从源到宿的传递和网络互连，传输单位为包，主要协议为IP ARP ICMP</li>\n<li>传输层：提供端到端的可靠报文传递和错误恢复，传输单位为报文，主要协议包括为TCP UDP</li>\n<li>会话层：建立、管理和终止会话，传输单位为SPDU，主要包括的协议为RPC NFS</li>\n<li>表示层：对数据进行翻译、加密和压缩，传输单位为PPDU，主要包括协议为JPEG ASII</li>\n<li>应用层：允许访问OSI环境的手段，传输单位为APDU，主要包括的协议为FTP HTTP DNS<h1 id=\"TCP-IP4层模型\"><a href=\"#TCP-IP4层模型\" class=\"headerlink\" title=\"TCP/IP4层模型\"></a>TCP/IP4层模型</h1></li>\n<li>网络接口层</li>\n<li>网络层</li>\n<li>传输层</li>\n<li>应用层</li>\n</ul>\n","categories":["计算机网络"]}]